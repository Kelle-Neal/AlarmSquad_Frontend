import React from 'react';
import PropTypes from 'prop-types';
import { isTime } from '../shared/propTypes';
type AmPmProps = {
    ariaLabel?: string;
    autoFocus?: boolean;
    className: string;
    disabled?: boolean;
    inputRef?: React.RefObject<HTMLSelectElement>;
    locale?: string;
    maxTime?: string;
    minTime?: string;
    onChange?: (event: React.ChangeEvent<HTMLSelectElement> & {
        target: HTMLSelectElement;
    }) => void;
    onKeyDown?: (event: React.KeyboardEvent<HTMLSelectElement> & {
        target: HTMLSelectElement;
    }) => void;
    required?: boolean;
    value?: string | null;
};
declare function AmPm({ ariaLabel, autoFocus, className, disabled, inputRef, locale, maxTime, minTime, onChange, onKeyDown, required, value, }: AmPmProps): JSX.Element;
declare namespace AmPm {
    var propTypes: {
        ariaLabel: PropTypes.Requireable<string>;
        autoFocus: PropTypes.Requireable<boolean>;
        className: PropTypes.Validator<string>;
        disabled: PropTypes.Requireable<boolean>;
        inputRef: PropTypes.Requireable<NonNullable<((...args: any[]) => any) | PropTypes.InferProps<{
            current: PropTypes.Requireable<any>;
        }> | null | undefined>>;
        locale: PropTypes.Requireable<string>;
        maxTime: typeof isTime;
        minTime: typeof isTime;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        onKeyDown: PropTypes.Requireable<(...args: any[]) => any>;
        required: PropTypes.Requireable<boolean>;
        value: PropTypes.Requireable<string>;
    };
}
export default AmPm;
