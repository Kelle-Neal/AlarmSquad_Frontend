import React from 'react';
import PropTypes from 'prop-types';
import Clock from 'react-clock';
import { isTime } from './shared/propTypes';
import type { ClassName, Detail, LooseValue, Value } from './shared/types';
type Icon = React.ReactElement | string;
type IconOrRenderFunction = Icon | React.ComponentType | React.ReactElement;
type TimePickerProps = {
    amPmAriaLabel?: string;
    autoFocus?: boolean;
    className?: ClassName;
    clearAriaLabel?: string;
    clearIcon?: IconOrRenderFunction | null;
    clockAriaLabel?: string;
    clockClassName?: ClassName;
    clockIcon?: IconOrRenderFunction | null;
    closeClock?: boolean;
    'data-testid'?: string;
    disableClock?: boolean;
    disabled?: boolean;
    format?: string;
    hourAriaLabel?: string;
    hourPlaceholder?: string;
    id?: string;
    isOpen?: boolean;
    locale?: string;
    maxDetail?: Detail;
    maxTime?: string;
    minTime?: string;
    minuteAriaLabel?: string;
    minutePlaceholder?: string;
    name?: string;
    nativeInputAriaLabel?: string;
    onChange?: (value: Value) => void;
    onClockClose?: () => void;
    onClockOpen?: () => void;
    onFocus?: (event: React.FocusEvent<HTMLDivElement>) => void;
    openClockOnFocus?: boolean;
    portalContainer?: HTMLElement | null;
    required?: boolean;
    secondAriaLabel?: string;
    secondPlaceholder?: string;
    value?: LooseValue;
} & Omit<React.ComponentPropsWithoutRef<typeof Clock>, 'value'>;
declare function TimePicker(props: TimePickerProps): JSX.Element;
declare namespace TimePicker {
    var propTypes: {
        amPmAriaLabel: PropTypes.Requireable<string>;
        autoFocus: PropTypes.Requireable<boolean>;
        className: PropTypes.Requireable<NonNullable<string | (string | null | undefined)[] | null | undefined>>;
        clearAriaLabel: PropTypes.Requireable<string>;
        clearIcon: PropTypes.Requireable<NonNullable<PropTypes.ReactNodeLike | ((...args: any[]) => any)>>;
        clockAriaLabel: PropTypes.Requireable<string>;
        clockClassName: PropTypes.Requireable<NonNullable<string | (string | null | undefined)[] | null | undefined>>;
        clockIcon: PropTypes.Requireable<NonNullable<PropTypes.ReactNodeLike | ((...args: any[]) => any)>>;
        closeClock: PropTypes.Requireable<boolean>;
        'data-testid': PropTypes.Requireable<string>;
        disableClock: PropTypes.Requireable<boolean>;
        disabled: PropTypes.Requireable<boolean>;
        format: PropTypes.Requireable<string>;
        hourAriaLabel: PropTypes.Requireable<string>;
        hourPlaceholder: PropTypes.Requireable<string>;
        id: PropTypes.Requireable<string>;
        isOpen: PropTypes.Requireable<boolean>;
        locale: PropTypes.Requireable<string>;
        maxDetail: PropTypes.Requireable<"hour" | "minute" | "second">;
        maxTime: typeof isTime;
        minTime: typeof isTime;
        minuteAriaLabel: PropTypes.Requireable<string>;
        minutePlaceholder: PropTypes.Requireable<string>;
        name: PropTypes.Requireable<string>;
        nativeInputAriaLabel: PropTypes.Requireable<string>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        onClockClose: PropTypes.Requireable<(...args: any[]) => any>;
        onClockOpen: PropTypes.Requireable<(...args: any[]) => any>;
        onFocus: PropTypes.Requireable<(...args: any[]) => any>;
        openClockOnFocus: PropTypes.Requireable<boolean>;
        portalContainer: PropTypes.Requireable<object>;
        required: PropTypes.Requireable<boolean>;
        secondAriaLabel: PropTypes.Requireable<string>;
        secondPlaceholder: PropTypes.Requireable<string>;
        value: PropTypes.Requireable<{}>;
    };
}
export default TimePicker;
